{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scrollItemIntoView = scrollItemIntoView;\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n/* eslint-disable import/prefer-default-export */\n\n// Helps scroll a list item into view when cycling through list via\n// keybindings and highlighted item is not in view.\n\n// Previously, this util had been using `scrollIntoView`. The issue with that method is that\n// it will not only scroll the parent scroll but also the window scroll bar - causing a jump.\n// problem description https://lists.w3.org/Archives/Public/www-style/2014Jul/0386.html\n\n// CHASE: I've noticed some performance issues when testing this with many items in the list.\n// I imagine the browser can debounce the `node.scrollIntoView` calls. Callers of this function\n// will likely want to debounce themselves.\nfunction scrollItemIntoView(child, parent, isFirst, isLast) {\n  let scrollAlignInView = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'auto';\n  if (!child) return;\n  const childRect = child.getBoundingClientRect();\n  const parentRect = parent.getBoundingClientRect();\n\n  // while scrolling down, if element is below view\n  if (childRect.bottom > parentRect.bottom) {\n    if (isLast) {\n      parent.scrollTop = parent.scrollHeight - parentRect.height;\n    } else {\n      const targetBottom = child.offsetTop + childRect.height;\n      parent.scrollTop = targetBottom - (scrollAlignInView === 'center' ? Math.round((parentRect.height + childRect.height) / 2) : parentRect.height);\n    }\n\n    // while scrolling up, if element is above view\n  } else if (childRect.top < parentRect.top) {\n    if (isFirst) {\n      parent.scrollTop = 0;\n    } else {\n      parent.scrollTop = child.offsetTop - (scrollAlignInView === 'center' ? Math.round((parentRect.height - childRect.height) / 2) : 0);\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","scrollItemIntoView","child","parent","isFirst","isLast","scrollAlignInView","arguments","length","undefined","childRect","getBoundingClientRect","parentRect","bottom","scrollTop","scrollHeight","height","targetBottom","offsetTop","Math","round","top"],"sources":["/tmp/Weather-App/weatherapp_project/weather_frontend/node_modules/baseui/menu/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scrollItemIntoView = scrollItemIntoView;\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n/* eslint-disable import/prefer-default-export */\n\n// Helps scroll a list item into view when cycling through list via\n// keybindings and highlighted item is not in view.\n\n// Previously, this util had been using `scrollIntoView`. The issue with that method is that\n// it will not only scroll the parent scroll but also the window scroll bar - causing a jump.\n// problem description https://lists.w3.org/Archives/Public/www-style/2014Jul/0386.html\n\n// CHASE: I've noticed some performance issues when testing this with many items in the list.\n// I imagine the browser can debounce the `node.scrollIntoView` calls. Callers of this function\n// will likely want to debounce themselves.\nfunction scrollItemIntoView(child, parent, isFirst, isLast, scrollAlignInView = 'auto') {\n  if (!child) return;\n  const childRect = child.getBoundingClientRect();\n  const parentRect = parent.getBoundingClientRect();\n\n  // while scrolling down, if element is below view\n  if (childRect.bottom > parentRect.bottom) {\n    if (isLast) {\n      parent.scrollTop = parent.scrollHeight - parentRect.height;\n    } else {\n      const targetBottom = child.offsetTop + childRect.height;\n      parent.scrollTop = targetBottom - (scrollAlignInView === 'center' ? Math.round((parentRect.height + childRect.height) / 2) : parentRect.height);\n    }\n\n    // while scrolling up, if element is above view\n  } else if (childRect.top < parentRect.top) {\n    if (isFirst) {\n      parent.scrollTop = 0;\n    } else {\n      parent.scrollTop = child.offsetTop - (scrollAlignInView === 'center' ? Math.round((parentRect.height - childRect.height) / 2) : 0);\n    }\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,kBAAkBA,CAACC,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAA8B;EAAA,IAA5BC,iBAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;EACpF,IAAI,CAACL,KAAK,EAAE;EACZ,MAAMQ,SAAS,GAAGR,KAAK,CAACS,qBAAqB,CAAC,CAAC;EAC/C,MAAMC,UAAU,GAAGT,MAAM,CAACQ,qBAAqB,CAAC,CAAC;;EAEjD;EACA,IAAID,SAAS,CAACG,MAAM,GAAGD,UAAU,CAACC,MAAM,EAAE;IACxC,IAAIR,MAAM,EAAE;MACVF,MAAM,CAACW,SAAS,GAAGX,MAAM,CAACY,YAAY,GAAGH,UAAU,CAACI,MAAM;IAC5D,CAAC,MAAM;MACL,MAAMC,YAAY,GAAGf,KAAK,CAACgB,SAAS,GAAGR,SAAS,CAACM,MAAM;MACvDb,MAAM,CAACW,SAAS,GAAGG,YAAY,IAAIX,iBAAiB,KAAK,QAAQ,GAAGa,IAAI,CAACC,KAAK,CAAC,CAACR,UAAU,CAACI,MAAM,GAAGN,SAAS,CAACM,MAAM,IAAI,CAAC,CAAC,GAAGJ,UAAU,CAACI,MAAM,CAAC;IACjJ;;IAEA;EACF,CAAC,MAAM,IAAIN,SAAS,CAACW,GAAG,GAAGT,UAAU,CAACS,GAAG,EAAE;IACzC,IAAIjB,OAAO,EAAE;MACXD,MAAM,CAACW,SAAS,GAAG,CAAC;IACtB,CAAC,MAAM;MACLX,MAAM,CAACW,SAAS,GAAGZ,KAAK,CAACgB,SAAS,IAAIZ,iBAAiB,KAAK,QAAQ,GAAGa,IAAI,CAACC,KAAK,CAAC,CAACR,UAAU,CAACI,MAAM,GAAGN,SAAS,CAACM,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACpI;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}