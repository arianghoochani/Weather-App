# swagger.yml

openapi: 3.0.0
info:
  title: "Weather information Service"
  description: "An Api for controlling weather information through CRUD services."
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Weather:
      type: "object"
      required:
        - city
        - temperature
        - humidity
        - windspeed
      properties:
        city:
          type: "string"
        temperature:
          type: "number"
          format: "float"
        humidity:
          type: "number"
          format: "float"
        windspeed:
          type: "number"
          format: "float"
  parameters:
    city:
      name: "city"
      description: "name of the city to get weather information"
      in: path
      required: True
      schema:
        type: "string"



paths:
  /weather:
    options:
      operationId: "controller.weather.handle_options"  
      responses:
        "204":
          description: "Preflight OK"
       
    get:
      operationId: "controller.weather.getAllWeatherInfo"
      tags:
        - Weather
      summary: "retrieve all weathers information"
      responses:
        "200":
          description: "Successfully read weather list"
    post:
      operationId: "controller.weather.createWeatherInfo"
      tags:
        - Weather
      summary: "Create a new weather record"
      requestBody:
          description: "weather information to be created"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "weather"
                $ref: "#/components/schemas/Weather"
      responses:
        "201":
          description: "Successfully created weather information"
    put:
      operationId: "controller.weather.updateWeatherInfo"
      tags:
        - Weather
      summary: "update a new weather record"
      requestBody:
          description: "weather information to be updated"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "weather"
                $ref: "#/components/schemas/Weather"
      responses:
        "201":
          description: "Successfully updated weather information"
  
  
  /weather/{city}:
    get:
      operationId: "controller.weather.getWeatherInfo"
      tags:
        - Weather
      summary: "Read one weather information"
      parameters:
        - $ref: "#/components/parameters/city"
      responses:
        "200":
          description: "Successfully read weather information" 
    # put:
    #   operationId: "controller.weather.update"
    #   tags:
    #     - Weather
    #   summary: "Update a weather info"
    #   parameters:
    #     - $ref: "#/components/parameters/city"
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           x-body-name: "weather"
    #           $ref: "#/components/schemas/Weather"
      # responses:
      #   "200":
      #     description: "Successfully updated weather information"
    delete:
      tags:
        - Weather
      operationId: "controller.weather.deleteWeather"
      summary: "Delete a weather information"
      parameters:
        - $ref: "#/components/parameters/city"
      responses:
        "204":
          description: "Successfully deleted"
    options:  
      operationId: "controller.weather.handle_options2"
      summary: "Handle CORS Preflight for DELETE,PUT,GET"
      responses:
        "204":
          description: "Preflight OK"